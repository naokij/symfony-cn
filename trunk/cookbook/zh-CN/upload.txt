如何上传文件
====================

提要
----

后台和协作的应用经常要求用户上传媒体和数据文件。 只需要几行代码，symfony 就可以将这一切掌控：文件重命名，移动到上传目录等等。 使用管理生成（admin generator）的用户更可运用一个新的助手（helper）将其实施减少到一个简单的配置。

普通文件上传
----------

上传文件需要一个含有表单的模板（template）,一个动作（action）来完成相应的处理工作。 就模板而言，在其中使用 `input_file_tag()` 助手，并将 `multipart` 选项打开：

    [php]
    <?php echo form_tag('media/upload', 'multipart=true') ?>
      <?php echo input_file_tag('file') ?>
      <?php echo submit_tag('Send') ?>
    </form>
    
如下的 HTML 代码将被生成：

    [php]
    <form method="post" enctype="multipart/form-data" action="media/upload">
      <input type="file" name="file" id="file" value="" />
      <input type="submit" name="commit" value="Send" />
    </form>
    
行为（本例中的 `media/upload` ）将文件从请求之处移动到上传目录：

    [php]
    public function executeUpload()
    {
      $fileName = $this->getRequest()->getFileName('file');
      
      $this->getRequest()->moveFile('file', sfConfig::get('sf_upload_dir').'/'.$fileName);
  
      $this->redirect('media/show?filename='.$fileName);    
    }

`sf_upload_dir` 参数指代你的服务器上文件将被上到的绝对路径。 对于一个名为 `myproject` 的项目，通常是 `/home/production/myproject/web/upload/`。 你可以通过修改  `config/config.php` 轻易地更改之。

    [php]
    sfConfig::add(array(
      'sf_upload_dir_name'  => $sf_upload_dir_name = 'uploads',
      'sf_upload_dir'       => sfConfig::get('sf_root_dir').DIRECTORY_SEPARATOR.sfConfig::get('sf_web_dir_name').DIRECTORY_SEPARATOR.$sf_upload_dir_name,      
    ));    

>**Note**：在将文件从请求之出移动到上传目录之前，你应该整理文件名称，取出其中的特殊字符以避免文件系统方面的麻烦。 另外，你在将 `$fileName` 作为请求参数传递之前，应该先进行特殊字符处理。

显示上传的文件要使用 `sf_upload_dir_name` 参数。 例如，如果上传的是一个媒体文件， `media/show` 模板将这样显示之：

    [php]
    ...
    <?php echo image_tag('/'.sfConfig::get('sf_upload_dir_name').'/'.$sf_params->get('filename')) ?>

验证
----

与普通表单一样，文件上传标记（tag）可以被 [symfony 验证器（validator）](http://www.symfony-project.com/book/trunk/10-Forms#Validators) 验证：`sfFileValidator`。只需要在验证器声明中在 `names`  键之下添加自定义的 `file: true` 。例如：为前面的表单进行验证的 `validate/upload.yml` 应被设置为：

    methods:
      post:               [file]
      
    names:
      file:
        required:         Yes
        required_msg:     Please upload a file
        validators:       myFileValidator
        file:             true
        
    myFileValidator:
      class:              sfFileValidator
      param:
        mime_types:       
          - 'image/jpeg'
          - 'image/png'
          - 'image/x-png'
          - 'image/pjpeg'        
        mime_types_error: Only PNG and JPEG images are allowed
        max_size:         512000
        max_size_error:   Max size is 512Kb

>**Note**：鉴于 Internet Explorer 和其他浏览器的不一致性，你必须像其他情形一样使用IE指定的（IE-specific） mime 类型。

`sfFileValidator` 可以验证上传文件的类型（你可以制定一个 mime 类型数组）以及大小（你可以制定最小和最大值）。

缩略图（Thumbnails）
------------------

如果你是上传文件，你可能需要为每个上传的文件建立缩略图。[`sfThumbnail` plugin](http://www.symfony-project.com/trac/wiki/sfThumbnailPlugin)可能对此情形很有用。

首先，安装使用 symfony 命令行安装插件（plugin）：

    $ symfony plugin-install http://plugins.symfony-project.com/sfThumbnailPlugin
    $ symfony cc
    
>**Note**：如果 GD 库没有激活，你可能必须在 `php.ini` 文件中清除掉相关行的注视并重启你的网站服务以开启 PHP 图片处理函数。

插件一经安装，你便可以通过 `sfThumbnail` 对象使用它。 例如：在上传前面例子中的图片的同时存储一个最大大小为 150x150px 的缩略图，以下面的代码取代 `media/upload` 动作中的代码：

    [php]
    public function executeUpload()
    {
      $fileName = $this->getRequest()->getFileName('file');
      
      $thumbnail = new sfThumbnail(150, 150);
      $thumbnail->loadFile($this->getRequest()->getFilePath('file'));
      $thumbnail->save(sfConfig::get('sf_upload_dir').'/thumbnail/'.$fileName, 'image/png');
      
      $this->getRequest()->moveFile('file', sfConfig::get('sf_upload_dir').'/'.$fileName);
  
      $this->redirect('media/show?filename='.$fileName);    
    }

在调用该动作之前，不要忘记建立 `uploads/thumbnail/` 目录。

使用 admin generator 上传文件
---------------------------

如果你的数据模型包含为媒体（media）准备的字段（field）,并且是通过the [admin generator](http://www.symfony-project.com/book/trunk/14-Generators#Administration)建立的管理系统，你可以使用 `object_admin_input_upload_tag()` 助手。一个简单的配置一切都为你安排好了。

例如， 如果你的 `User` 表含有 `photo` 列， `generator.yml` 的 `edit` 视图可以配置为：

    edit:
      title:          User profile
      fields:
        photo:
          name:       User photo
          help:       max width 200px
          type:       admin_input_file_tag
          upload_dir: pictures/users
          params:     include_link=pictures/users include_remove=true
      display:        [name, email, photo]

`upload_dir` 键设置上传文件夹 （在 `uploads/` 目录中）。

如果你设置了一个 `include_link` 参数，一个链接将被加到上传的媒体（如果媒体已被上传）。在没有修改 `include_text` 参数之前，链接的文字默认是 '[show file（显示文件）]' 。

如果你设置了一个 `include_remove` 参数，助手将显示一个允许你轻松点击就删除媒体文件的连接。
