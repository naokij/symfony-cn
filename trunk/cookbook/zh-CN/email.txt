如何发送 Email
====================

概述
--------

从网站应用发送 Email 是很常见的工作。 symfony 以其熟悉的方法（MVC 分离）方法，通过其架构自动实现，并且提供了一个特定的类来处理邮件的各种特性（multiple mine类型， 附带媒体，附件）。

介绍
------------

symfony 提供两种方法用于从网站应用发送 Email：

- 通过 `sfMail` 类，一个提供 [PHPMailer](http://phpmailer.sourceforge.net/) 界面代理 （proxy）类。这种方法简单快捷，但是不能达到 MVC 分离，而且很难实现 i18n 兼容。 复杂的 Email 也很难通过 `sfMail` 类单独处理。

- 通过特定的动作（action）和模板（template）。这种方法很强大且凭借其独有的特性以普通页面的形式处理 Email。 构建之时略微复杂，但比起一种方式强大很多。

下面将以同一个例子（根据用户请求发送遗忘的密码）分别展示两种方法。

直接使用 `sfMail`
----------------

对于了解 `PHPMailer` 类使用者， `sfMail` 类看上去很熟悉。 他只不过是利用 symfony 语法优势开发的 `PHPMailer` 类的代理（）， `PHPMailer` 类已经包含在 symfony 包中，所以不需要额外的安装。

向客户发送一封饱含密码的 Email，需要如下的动作：

    [php]
    public function executePasswordRequest()
    {
      // determine customer from the request 'id' parameter
      $customer = CustomerPeer::retrieveByPk($this->getRequestParameter('id'));
      
      // class initialization
      $mail = new sfMail();
      $mail->initialize();
      $mail->setMailer('sendmail');
      $mail->setCharset('utf-8');
      
      // definition of the required parameters
      $mail->setSender('webmaster@my-company.com', 'My Company webmaster');
      $mail->setFrom('webmaster@my-company.com', 'My Company webmaster');
      $mail->addReplyTo('webmaster_copy@my-company.com');
  
      $mail->addAddress($customer->getEmail());
  
      $mail->setSubject('Your password request');
      $mail->setBody('
      Dear customer,
      
      You are so absentminded. Next time, try to remember your password:
      '.$customer->getPassword().'
      
      Regards,
      The My Company webmaster');
      
      // send the email
      $mail->send();
    }
  
使用动作
------------

在很多情形下，从逻辑上讲， email 发送过程与实现其他目的的动作没有什么不同，所以经常被放在动作中，如下所示：

    [php]
    public function executePasswordRequest()
    {
      // send the email
      $raw_email = $this->sendEmail('mail', 'sendPassword');  
      
      // log the email
      $this->logMessage($raw_email, 'debug');
    }

email 发送被安排在 `mail` 模块的 `sendPassword` 动作中。  The email sending is delegated to a `sendPassword` action of a `mail` module. The `sfAction` 类的 `sendEmail()` 方法是一种特殊类型的 `forward()` ，用于执行其他的动作并在之后调转回来（它不会终止当前的动作）。 另外，它返回一个可以写入日志（log）（[Chapter 16](http://www.symfony-project.com/book/trunk/16-Application-Management-Tools#Debugging)有记录日志信息的进一步信息）的原邮件。 

`mail/sendPassword` 处理 `sfMail` 类， 但是不需要定义 mailer （可以从配置文件中获得）也不需要将其初始化：

    [php]
    public function executeSendPassword()
    {
      // determine customer from the request 'id' parameter
      $customer = CustomerPeer::retrieveByPk($this->getRequestParameter('id'));
      
      // class initialization
      $mail = new sfMail();
      $mail->setCharset('utf-8');      
      
      // definition of the required parameters
      $mail->setSender('webmaster@my-company.com', 'My Company webmaster');
      $mail->setFrom('webmaster@my-company.com', 'My Company webmaster');
      $mail->addReplyTo('webmaster_copy@my-company.com');
  
      $mail->addAddress($customer->getEmail());
  
      $mail->setSubject('Your password request');
      
      $this->password = $customer->getPassword();
      $this->mail = $mail;    
    }
    
应注意到动作并没有调用 `sfMail` 对象的 `send()` 方法，而是由 `sendEmail()` 来调用，通过发送 `$this->mail` `sfMail` 对象实现。那么邮件在哪呢？你会问。 这就是 MVC 分离的妙处：邮件正文本身写在模板文件 `sendPasswordSuccess.php` 之中：

    [php]
    Dear customer,
    
    You are so absentminded. Next time, try to remember your password:
    <?php echo $password ?>
    
    Regards,
    The My Company webmaster

>**Note**：如果 `sendPassword` 动作中决定不发送邮件，仍可以像其他动作一样通过返回 `sfView::NONE` 中止邮件发送过程。

Mailer 配置
--------------------

如果你使用动作方法，你可以（不是必须的）设置 mailer 并通过配置文件逐个环境地激活之。

在 `modules/mail/config/` 目录建立一个 `mailer.yml` 配置文件，写入如下内容：

    dev:
      deliver:    off
    
    all:
      mailer:     sendmail

这规定了所使用的邮件发送程序， 且规定开发环境中不发送邮件。

发送 HTML 邮件
-------------

大多数情况， Email 是以 HTML 或者 multipart（包括 HTML 和 文本格式） 格式发送的。通过使用 `sfMail` 对象的 `setContentType()` 并指定备用的替换内容（Alternate Body）：

    [php]
    $mail->setContentType('text/html');
    $mail->setAltBody('
    <p>Dear customer</p>,
    <p>
      You are so <i>absentminded</i>. Next time, try to remember your password:<br>
      <b>'.$customer->getPassword().'</b>
    </p>
    <p>
      Regards,<br>
      The My Company webmaster
    </p>');    
    $mail->setAltBody('
    Dear customer,
    
    You are so absentminded. Next time, try to remember your password:
    '.$customer->getPassword().'
    
    Regards,
    The My Company webmaster');    

如果你使用的是动作方法，你只需使用以 `.altbody.php` 结尾的备用替换模板。 symfony 将自动添加备用替换内容：
    [php]
    // in sendPasswordSuccess.php
    <p>Dear customer</p>,
    <p>
      You are so <i>absentminded</i>. Next time, try to remember your password:<br>
      <b><?php echo $password ?></b>
    </p>
    <p>
      Regards,<br>
      The My Company webmaster
    </p>
        
    // in sendPasswordSuccess.altbody.php
    Dear customer,
    
    You are so absentminded. Next time, try to remember your password:
    <?php echo $password ?>
    
    Regards,
    The My Company webmaster

>**Note**: 如果你使用 HTML 而没有设置替换模板，你需要在 `sendPassword` 动作中将内容类型设置为 `text/html`。

嵌入图片
-------

HTML Email 可以直接在正文中嵌入图片。使用 `sfMail` 对象的 `addEmbeddedImage()` 方法添加嵌入图片：

    [php]
    $mail->addEmbeddedImage(sfConfig::get('sf_web_dir').'/images/my_company_logo.gif', 'CID1', 'My Company Logo', 'base64', 'image/gif');

第一个参数是图片的路径，第二个是模板中可以用于引用图片的参考：

    [php]
    // in sendPasswordSuccess.php
    <p>Dear customer</p>,
    <p>
      You are so <i>absentminded</i>. Next time, try to remember your password:<br>
      <b><?php echo $password ?></b>
    </p>
    <p>
      Regards,<br>
      The My Company webmaster
      <img src="cid:CID1" />
    </p>
    
>**Tip**: 你还可以不使用动作代码，通过 `embedded_image()` 助手直接在模板中嵌入图片。 使用请参阅 [code snippets section](http://www.symfony-project.com/snippets/snippet/27) 。

附件
---

Attaching a document to a mail is as simple as you would expect it to be:

    [php]
    // document attachment
    $mail->addAttachment(sfConfig::get('sf_data_dir').'/MyDocument.doc');
    // string attachment
    $mail->addStringAttachment('this is some cool text to embed', 'file.txt');

Email addresses advanced syntax
-------------------------------

In addition to recipients, emails often need to be sent as carbon copy ('cc:') or blind carbon copy ('bcc:'). Here is how to do this with `sfMail`:

    [php]
    $mail->addAddress($customer->getEmail());
    $mail->addCc('carbon_copy@my-companyt.com ');    
    $mail->addBcc('blind_carbon_copy@my-company.com');

The `sfMail` methods used to set emails (`setSender()`, `setFrom()`, `addReplyTo()`, `addAddress()`, `addCc()`, `addBcc()`) can use two syntaxes:

    [php]
    $mail->setFrom('me@symfony-project.com', 'Symfony');
    // is equivalent to
    $mail->setFrom('me@symfony-project.com <Symfony>');

In addition, to minimize the code in case of multiple recipients, `sfMail` has an `addAddresses()` method:

    [php]
    $mail->addAddress('client1@client.com <Jules>');
    $mail->addAddress('client2@client.com <Jim>');
    // is equivalent to
    $mail->addAddresses(array('client1@client.com <Jules>', 'client2@client.com <Jim>'));
    
`sfMail` methods
----------------

Once you've built your `sfMail` object, you might want to check its content. Fortunately, all the setter methods described above have an equivalent getter method, and you can clear the properties previously set:

    [php]
    setCharset($charset)
    getCharset()
    setContentType($content_type)
    getContentType()
    setPriority($priority)
    getPriority()
    setEncoding($encoding)
    getEncoding()
    setSubject($subject)
    getSubject()
    setBody($body)
    getBody()
    setAltBody($text)
    getAltBody()
    setMailer($type = 'mail')
    getMailer()
    setSender($address, $name = null)
    getSender()
    setFrom($address, $name = null)
    getFrom()
    addAddresses($addresses)
    addAddress($address, $name = null)
    addCc($address, $name = null)
    addBcc($address, $name = null)
    addReplyTo($address, $name = null)
    clearAddresses()
    clearCcs()
    clearBccs()
    clearReplyTos()
    clearAllRecipients()
    addAttachment($path, $name = '', $encoding = 'base64', $type = 'application/octet-stream')
    addStringAttachment($string, $filename, $encoding = 'base64', $type = 'application/octet-stream')
    addEmbeddedImage($path, $cid, $name = '', $encoding = 'base64', $type = 'application/octet-stream')
    setAttachments($attachments)
    clearAttachments()
    addCustomHeader($name, $value)
    clearCustomHeaders()
    setWordWrap($wordWrap)
    getWordWrap()
    
Sending emails from outside an action
-------------------------------------

If you want to send emails outside of an action (for instance in a batch process), you don't have any actions object to call the `sendEmail()` method on. Fortunately, this method is also available on the `sfController` object. So here is how you would call an emailing action in a batch script:

    [php]
    <?php

    define('SF_ROOT_DIR',    realpath(dirname(__FILE__).'/..'));
    define('SF_APP',         'myapp');
    define('SF_ENVIRONMENT', 'test');
    define('SF_DEBUG',       false);

    require_once(SF_ROOT_DIR.DIRECTORY_SEPARATOR.'apps'.DIRECTORY_SEPARATOR.SF_APP.DIRECTORY_SEPARATOR.'config'.DIRECTORY_SEPARATOR.'config.php');

    $raw_email = sfContext::getInstance()->getController()->sendEmail('mail', 'sendPassword');
